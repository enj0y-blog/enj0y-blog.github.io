<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Internet of Vehicles</title>
  
  
  <link href="http://enjoyvie.github.io.com/atom.xml" rel="self"/>
  
  <link href="http://enjoyvie.github.io.com/"/>
  <updated>2021-07-07T08:47:48.783Z</updated>
  <id>http://enjoyvie.github.io.com/</id>
  
  <author>
    <name>IOV_a</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>V2X_Base</title>
    <link href="http://enjoyvie.github.io.com/2021/07/07/V2X/"/>
    <id>http://enjoyvie.github.io.com/2021/07/07/V2X/</id>
    <published>2021-07-07T08:24:32.966Z</published>
    <updated>2021-07-07T08:47:48.783Z</updated>
    
    <content type="html"><![CDATA[<p>V2X，顾名思义就是vehicle-to-everything，其希望实现车辆与一切可能影响车辆的实体实现信息交互，目的是减少事故发生，减缓交通拥堵，降低环境污染以及提供其他信息服务。</p><span id="more"></span><h3 id="V2X分类"><a href="#V2X分类" class="headerlink" title="V2X分类"></a>V2X分类</h3><pre><code>+ 车辆与车辆V2V(Vehicle-to-Vehicle)：常见应用如防碰撞安全系统+ 车辆与基础设施V2I(Vehicle-to-Infrastructure)：交通信号指示与时间提醒+ 车辆与行人V2P(Vehicle-to-Pedestrian)：行人单车安全距离警报  + 车辆与外部网络V2N(Vehicle-to-Network)：实时地图，云服务等</code></pre><p><img src="/2021/07/07/V2X/V2X.jpg" alt="V2X分类">    </p><h3 id="V2X使用的技术"><a href="#V2X使用的技术" class="headerlink" title="V2X使用的技术"></a>V2X使用的技术</h3><h4 id="1-DSRC技术"><a href="#1-DSRC技术" class="headerlink" title="1. DSRC技术"></a>1. DSRC技术</h4><p>DSRC技术的产生基于三套标准：</p><ul><li>第一个是IEEE 1609，标题为“车载环境无线接入标准系列（WAVE）”，其定义了网络的架构和流程。</li><li>第二个是SAE J2735和SAE J2945，它们定义了消息包中携带的信息。该数据将包括来自汽车上的传感器的信息，例如位置，行进方向，速度和刹车信息。</li><li>第三个标准是IEEE 802.11p，它定义了汽车相关的“专用短距离通信”（DSRC）的物理标准。DSRC顶层协议栈是基于IEEE 1609标准开发的，V2V信息交互是使用轻量WSMP（WAVE Short Message Protocol）而不是WIFI使用的TCP/IP协议，TCP/IP协议用于V2I和V2N信息交互。DSRC底层、物理层和无线链路控制是基于IEEE 802.11p。使用IEEE 802.11系列标准的初心是利用WIFI的生态系统，但是WIFI最初设计用于固定通讯设备，后来制定IEEE 802.11p支持移动通讯设备。（</li></ul><p><img src="/2021/07/07/V2X/dsrc.jpg" alt="DSRC协议栈"></p><p>尽管DSRC技术发展早，并且得到了广泛的实际验证和应用，但是也存在局限性：</p><ul><li>DSRC采用载波监听多路访问协议，在高密度的交通情况下会出现数据包译码失败的可能</li><li>DSRC物理成的正交频分复用技术限制了最大的传输功率和传输范围</li><li>DSRC属于视距传输技术，障碍物较多的城市工况对其构成挑战</li></ul><h4 id="2-C-V2X技术"><a href="#2-C-V2X技术" class="headerlink" title="2. C-V2X技术"></a>2. C-V2X技术</h4><p>针对DSRC技术可能存在的问题，通信产业提出了C-V2X解决方案。C-V2X是一项利用和提高现有的长期演进技术（Long Term Evolution，LTE）特点及网络要素的信息技术，是3GPP Realease-14规范的一部分，该初始标准侧重于V2V通信，并逐渐增强对其他V2X操作场景的支持。目前3GPP组织已经完成了LTE-V2X的业务需求、网络架构、无线接入技术和V2V/V2X业务方面的研究和标准化，并将LTE-V2X标准立项申请提交到国际标准化组织ISO。2018年11月针对智能交通系统中的LTE-V2X应用ISO/DIS17515-3标准已经进入最终的国际标准草案阶段。</p><p>相比于DSRC技术，C-V2X具有独有的优势和特点，如图3所示。首先C-V2X物理层采用频分复用技术，提高了链路预算增益，能比DSRC提供更长的预警时间和2倍的通信范围；其次5G技术的导入以及移动生态系统的完善将为C-V2X制定清晰的技术演变路线支持；另外利用移动蜂窝技术，能够快速的实现C-V2X系统的商业化，并且和车载远程信息处理服务相结合，进一步提高效率、降低成本。</p><p><img src="/2021/07/07/V2X/%E4%BA%8C%E8%80%85%E5%AF%B9%E6%AF%94.jpg" alt="DSRC与C-V2X特点对比"><br>然而目前C-V2X的基础技术LTE还存在不足：</p><ul><li><p>目前蜂窝网络难以达到毫秒级的低延迟</p></li><li><p>LTE采用增强型多媒体广播多波等技术进行单点到多点的接口管理，但是主要支持静态场景，对于车辆拥挤的情况可能无法提供所需的效能；</p></li></ul><p>未来5G将充分考虑这方面的特殊场景，针对汽车使用场景，5G V2X将具备如下特点：</p><ul><li><p>采用毫米波频谱提升频谱带宽，实现超高速数据传输；</p></li><li><p>吞吐量达到1Gb/s以上，具有更好的网络覆盖均匀性；</p></li><li><p>实现毫秒级的端对端延迟；</p></li><li><p>实现穿透式增强现实，查看前方车辆反馈的视频，并发现弱势道路使用者；</p></li></ul><p>目前全球正在加紧制定5G国际技术标准，中国已于2017年展开5G第二阶段测试，在2018年进行大规模组网实验，于今年6月正式发放5G牌照，标志中国5G由试运行转至商用。由于LTE的V2X平滑演进至5G，基于LTE的C-V2X能够与未来5G进行复用。</p><p>欧洲和亚洲是C-V2X的积极倡导者，并且结成了各种旨在开发、测试，推进C-V2X的伙伴关系，包括法国“驶向5G”战略合作、德国“汽车连接未来一切”等。中国将V2X作为智能网联车和智能交通的一部分，纳入“中国制造2025”“互联网+”等国家战略。目前国内积极在开展5G车辆网方面的部署，北京积极推动5G车辆网重点示范应用城市，并且2020年将在重点区域完成5G车联网建设；2019年7月14日国内首个自动驾驶5G车联网示范区在在广州黄埔区开建；南京铁塔、开沃汽车和大唐移动合作，共同推荐5G智能网联汽车业务的合作。另外由于美国在继续使用DSRC还是使用C-V2X上存在分歧，丰田公司搁置了原定2021在美国车型部署DSRC技术。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;V2X，顾名思义就是vehicle-to-everything，其希望实现车辆与一切可能影响车辆的实体实现信息交互，目的是减少事故发生，减缓交通拥堵，降低环境污染以及提供其他信息服务。&lt;/p&gt;</summary>
    
    
    
    <category term="V2X" scheme="http://enjoyvie.github.io.com/categories/V2X/"/>
    
    
    <category term="V2X" scheme="http://enjoyvie.github.io.com/tags/V2X/"/>
    
  </entry>
  
  <entry>
    <title>LIN、CAN、FlexRay、MOST</title>
    <link href="http://enjoyvie.github.io.com/2021/06/30/%E5%9B%9B%E5%A4%A7%E6%80%BB%E7%BA%BF/"/>
    <id>http://enjoyvie.github.io.com/2021/06/30/%E5%9B%9B%E5%A4%A7%E6%80%BB%E7%BA%BF/</id>
    <published>2021-06-30T07:05:49.955Z</published>
    <updated>2021-06-30T07:41:28.613Z</updated>
    
    <content type="html"><![CDATA[<p>汽车中的电子部件越来越多，光是ECU就有几十个，这么多的电子单元都要进行信息交互。传统的点对点通信已经不能满足需求，因此必须要采用先进的总线技术。车用总线就是车载网络中底层的车用设备或车用仪表互联的通信网络。目前，有四种主流的车用总线：CAN总线、LIN总线、FlexRay总线和MOST总线</p><span id="more"></span><h3 id="LIN、CAN、FlexRay、MOST功能介绍"><a href="#LIN、CAN、FlexRay、MOST功能介绍" class="headerlink" title="LIN、CAN、FlexRay、MOST功能介绍"></a>LIN、CAN、FlexRay、MOST功能介绍</h3><p><img src="/2021/06/30/%E5%9B%9B%E5%A4%A7%E6%80%BB%E7%BA%BF/%E6%80%BB%E7%BA%BF%E5%88%86%E7%B1%BB.jpeg" alt="用一张表格来说明各种总线的区别"></p><h3 id="Lin总线"><a href="#Lin总线" class="headerlink" title="Lin总线"></a>Lin总线</h3><p>LIN（Local Interconnect Network）是面向汽车低端分布式应用的低成本（0.5美元），低速串行通信总线。它的目标是为现有汽车网络提供辅助功能，在不需要CAN总线的带宽和多功能的场合使用，降低成本。</p><p><img src="/2021/06/30/%E5%9B%9B%E5%A4%A7%E6%80%BB%E7%BA%BF/lin%E6%80%BB%E7%BA%BF%E5%BA%94%E7%94%A8.jpeg" alt="Lin总线在汽车上的应用"></p><p>LIN联盟成立于1999年，并发布了LIN01.0版本。最初的成员有奥迪、宝马、克莱斯勒、摩托罗拉、博世、大众和沃尔沃等。</p><p>LIN相对于CAN的成本节省主要是由于采用单线传输、硅片中硬件或软件的低实现成本和无需在从属节点中使用石英或陶瓷谐振器。这些优点是以较低的带宽和受局限的单宿主总线访问方法为代价的。</p><p>LIN包含一个宿主节点和一个或多个从属节点。所有节点都包含一个被分解为发送和接收任务的从属通讯任务，而宿主节点还包含一个附加的宿主发送任务。在实时LIN中，通讯总是由宿主任务发起的。</p><p>除了宿主节点的命名之外，LIN网络中的节点不使用有关系统设置的任何信息。我们可以在不要求其它从属节点改变硬件和软件的情况下向LIN 中增加节点。</p><p>宿主节点发送一个包含同步中断、同步字节和消息识别码的消息报头。从属任务在收到和过滤识别码后被激活并开始消息响应的传输。响应包含两个、四个或八个数据字节和一个检查和(checksum)字节。报头和响应部分组成一个消息帧。</p><p>LIN总线上的所有通讯都由主机节点中的主机任务发起，主机任务根据进度表来确定当前的通讯内容，发送相应的帧头，并为报文帧分配帧通道。总线上的从机节点接收帧头之后，通过解读标识符来确定自己是否应该对当前通讯做出响应、做出何种响应。基于这种报文滤波方式，LIN可实现多种数据传输模式，且一个报文帧可以同时被多个节点接收利用。</p><p>LIN总线物理层采用单线连接，两个电控单元间的最大传输距离为40m。其总线驱动器和接收器的规范遵从改进的ISO 9141 单线标准。基于SCI/UART( 通用异步收发接口的单总线串行通信)协议；目前几乎所有的微控制器芯片上都有SCI/UART接口。低传输速率、小于20kb/s、采用NRZ编码。</p><h3 id="CAN总线"><a href="#CAN总线" class="headerlink" title="CAN总线"></a>CAN总线</h3><p>CAN（Controller Area Network）即控制器局域网，可以归属于工业现场总线的范畴，通常称为CAN bus，即CAN总线，是目前国际上应用最广泛的开放式现场总线之一。</p><p>CAN 最初出现在汽车工业中，80年代由德国Bosch公司最先提出。最初动机是为了解决现代汽车中庞大的电子控制装置之间的通讯，减少不断增加的信号线。</p><p>CAN总线是一种串行数据通信协议，其通信接口中集成了CAN协议的物理层和数据链路层功能，可完成对通信数据的成帧处理，包括位填充、数据块编码、循环冗余检验、优先级判别等项工作。</p><p><img src="/2021/06/30/%E5%9B%9B%E5%A4%A7%E6%80%BB%E7%BA%BF/can.jpeg" alt="CAN总线原理"></p><p><img src="/2021/06/30/%E5%9B%9B%E5%A4%A7%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpeg" alt="CAN总线结构"></p><p>总结下，当一个节点要向其它节点发送数据时，该节点的CPU 将要发送的数据和自己的标识符传送给本节点的CAN芯片，并处于准备状态；当它收到总线分配时，转为发送报文状态。CAN 芯片将数据根据协议组织成一定的报文格式发出，这时，网上的其它节点处于接收状态。每个处于接收状态的节点对接收到的报文进行检测，判断这些报文是否是发给自己的，以确定是否接收它。</p><h3 id="FlexRay总线"><a href="#FlexRay总线" class="headerlink" title="FlexRay总线"></a>FlexRay总线</h3><p>FlexRay总线是由宝马、飞利浦、飞思卡尔和博世等公司共同制定的一种新型通信标准，专为车内联网而设计，采用基于时间触发机制，具有高带宽、容错性能好等特点，在实时性、可靠性和灵活性方面具有一定的优势。</p><p>FlexRay总线数据收发采取时间触发和事件触发的方式。利用时间触发通信时，网络中的各个节点都预先知道彼此将要进行通信的时间，接收器提前知道报文到达的时间，报文在总线上的时间可以预测出来。即便行车环境恶劣多变，干扰了系统传输，FlexRay协议也可以确保将信息延迟和抖动降至最低，尽可能保持传输的同步与可预测。这对需要持续及高速性能的应用(如线控刹车、线控转向等)来说，是非常重要的。</p><p>它采用了周期通信的方式，一个通信周期可以划分为静态部分、动态部分、特征窗和网络空闲时间4个部分。静态部分和动态部分用来传输总线数据，即FlexRay报文。特征窗用来发送唤醒特征符和媒介访问检测特征符。网络空闲时间用来实现分布式的时钟同步和节点参数的初始化。</p><p>FlexRay具有高速、可靠及安全的特点. FlexRay在物理上通过两条分开的总线通信，每一条的数据速率是10MBit/s。FlexRay还能够提供很多网络所不具有的可靠性特点。尤其是FlexRay具备的冗余通信能力可实现通过硬件完全复制网络配置，并进行进度监测。FlexRay同时提供灵活的配置，可支持各种拓扑，如总线、星型和混合拓扑。FlexRay本身不能确保系统安全，但它具备大量功能，可以支持以安全为导向的系统（如线控系统）的设计。</p><p><img src="/2021/06/30/%E5%9B%9B%E5%A4%A7%E6%80%BB%E7%BA%BF/flexray.jpeg" alt="FlexRay总线应用"></p><p>宝马公司在07款X5系列车型的电子控制减震器系统中首次应用了FlexRay技术。此款车采用基于飞思卡尔的微控制器和恩智浦的收发器，可以监视有关车辆速度、纵向和横向加速度、方向盘角度、车身和轮胎加速度及行驶高度的数据，实现了更好的乘坐舒适性以及驾驶时的安全性和高速响应性，此外还将施加给轮胎的负荷变动以及底盘的振动均减至最小</p><h3 id="MOST总线"><a href="#MOST总线" class="headerlink" title="MOST总线"></a>MOST总线</h3><p>MOST 是一种专门针对车内使用而开发的、服 务于多媒体应用的数据总线技术。 MOST 表示“多媒体传输系统”。</p><p>MOST 总 线利用光脉冲传输数据。MOST 总线采用环形 结构。在环形总线内只能朝着一个方向传输数 据。</p><p>MOST的传输技术近似于公众交换式电话网络（Public Switched Telephone Network；PSTN），有着数据信道（Data Channel）与控制信道（Control Channel）的设计定义，控制信道即用来设定如何使用与收发数据信道。 一旦设定完成，资料就会持续地从发送处流向接收处，过程中不用再有进一步的封包处理程序，将运作机制如此设计，最适合用于实时性音讯、视讯串流传输。</p><p>MOST在制订上完全合乎ISO/OSI的7层数据通讯协议参考模型，而在网线连接上MOST采用环状拓朴，不过在更具严苛要求的传控应用上，MOST也允许改采星状（亦称放射状）或双环状的连接组态，此外每套MOST传控网络允许最多达64个的装置（节点）连接。</p><p><img src="/2021/06/30/%E5%9B%9B%E5%A4%A7%E6%80%BB%E7%BA%BF/most.jpeg" alt="MOST总线组成"></p><p><img src="/2021/06/30/%E5%9B%9B%E5%A4%A7%E6%80%BB%E7%BA%BF/most2.jpeg" alt="MOST总线控制单元"></p><p>MOST也支持随插即用（Plug and Play；PnP）机制。</p><p>MOST总线基于环形拓扑，从而允许共享多个发送和接收器的数据。MOST总线主控器(通常位于汽车音响主机处)有助于数据采集，所以该网络可支持多个主拓扑结构，在一个网络上最多高达64个主设备。</p><p>MOST的总数据传输率为24.8Mbps，这已是将音视讯的串流资料与封包传控资料一并列计，在24.8 Mbps的频宽中还可区隔成60个传输信道、15个MPEG-1的视讯编码信道，这些可由传控设计者再行组态、规划与调配。</p><p>由于这些优点，MOST是汽车电子中应用最多的最佳多媒体传控网络。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>CAN总线是中坚，LIN是CAN的副手，FlexRay是未来的希望，MOST则负责文化事业。这四种总线将在未来继续大放异彩。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;汽车中的电子部件越来越多，光是ECU就有几十个，这么多的电子单元都要进行信息交互。传统的点对点通信已经不能满足需求，因此必须要采用先进的总线技术。车用总线就是车载网络中底层的车用设备或车用仪表互联的通信网络。目前，有四种主流的车用总线：CAN总线、LIN总线、FlexRay总线和MOST总线&lt;/p&gt;</summary>
    
    
    
    <category term="车载网络" scheme="http://enjoyvie.github.io.com/categories/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="总线安全" scheme="http://enjoyvie.github.io.com/tags/%E6%80%BB%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CAN总线分析</title>
    <link href="http://enjoyvie.github.io.com/2021/06/24/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/"/>
    <id>http://enjoyvie.github.io.com/2021/06/24/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/</id>
    <published>2021-06-24T09:26:05.132Z</published>
    <updated>2021-06-29T11:38:44.669Z</updated>
    
    <content type="html"><![CDATA[<p>控制器局域网 (Controller Area Network，简称 CAN或者 CAN bus) 是一种功能丰富的车用总线标准。被设计用于在不需要主机（Host）的情况下，允许网络上的单片机和仪器相互通信。 它基于信息传递协议，设计之初在车辆上采用复用通讯线缆，以降低铜线使用量，后来也被其他行业所使用。它是由研发和生产汽车电子产品著称的德国 BOSCH公司开发的，是国际上应用最广泛的现场总线之一。 </p><span id="more"></span><h3 id="CAN的国际标准化"><a href="#CAN的国际标准化" class="headerlink" title="CAN的国际标准化"></a>CAN的国际标准化</h3><ul><li>ISO11898 定义为 高速 CAN 通信标准，通讯速度达 125Kbps ~ 1Mbps，总线最大长度 40m/1Mbps，连接单元数最大 30，属于闭环总线，终端电阻：120Ω。</li><li>ISO11519 - 2 定义为 低速 CAN 通信标准，通讯速度在 125Kbps以下，总线最大长度 1km/40Kbps，连接单元数最大 20，属于开环总线，终端电阻：2.2KΩ。</li></ul><h3 id="CAN总线拓扑图及架构"><a href="#CAN总线拓扑图及架构" class="headerlink" title="CAN总线拓扑图及架构"></a>CAN总线拓扑图及架构</h3><p>多个电子控制单元（ECU）和HOST分别连接到总线上。电子控制单元和HOST被称作节点（can node）。节点的复杂程度可以只是简单的输入输出设备，也可以是包含有 CAN交互器并搭载了软件的嵌入式组件。节点还可能是一个网关，允许普通计算机通过 USB或以太网端口与 CAN网络上的设备通信。</p><p><img src="/2021/06/24/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/CAN%E6%8B%93%E6%89%91.jpg" alt="CAN总线拓扑图及架构"></p><p>每个节点的组成包括：</p><ul><li>中央处理器、微处理器或主处理器：处理主机决定收到的信息的意思以及想要传输的信息。传感器、驱动器和控制设备可以与主处理器连接。</li><li>CAN控制器；通常是集成单片机的一部分，接收：CAN控制器将从总线上接收的串位字节存储直到整个消息可用，之后主处理器可以获取这个消息（通常由于 CAN控制器触发一个中断）。发送：主处理器发送传递信息到 CAN控制器，之后当总线空闲时将串位信息传递至总线。</li><li>CAN收发器；由 ISO11898-2/3介质访问单元（MAU）标准定义，接收：把数据流从CAN总线层转换成 CAN控制器可以使用的标准。 CAN控制器通常配有保护电路。传输：把来自 CAN控制器的数据流转换至 CAN总线层。</li></ul><h3 id="CAN信号"><a href="#CAN信号" class="headerlink" title="CAN信号"></a>CAN信号</h3><p>CAN总线电平分为显性电平和隐性电平两种。总线上执行逻辑上的线 “与” 时，显性电平的逻辑值为 “0”，隐性电平为 “1”。<br> “显性” 具有 “优先” 的意味，只要有一个单元输出显性电平，总线上即为显性电平。并且，“隐性” 具有 “包容” 的意味，只有所有的单元都输出隐性电平，总线上才为隐性电平。（显性电平比隐性电平更强。）总线必须处于两种电平之一。<br>ISO11898标准（125kbps ~ 1Mbps）和 ISO11519 - 2标准（10kbps ~ 125kbps）</p><p><img src="/2021/06/24/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/can%E4%BF%A1%E5%8F%B7.png" alt="CAN信号"></p><h3 id="CAN的特点"><a href="#CAN的特点" class="headerlink" title="CAN的特点"></a>CAN的特点</h3><p>(1)多主控制<br>在总线空闲时，所有的单元都可开始发送消息（多主控制）。<br>最先访问总线的单元可获得发送权（CSMA/CA 方式 *1）。<br>多个单元同时开始发送时，发送高优先级 ID 消息的单元可获得发送权。<br>(2) 消息的发送<br>在 CAN 协议中，所有的消息都以固定的格式发送。总线空闲时，所有与总线相连的单元都可以开始发送新消息。两个以上的单元同时开始发送消息时，根据标识符（Identifier 以下称为 ID）决定优先级。ID 并不是表示发送的目的地址，而是表示访问总线的消息的优先级。两个以上的单元同时开始发送消息时，对各消息ID 的每个位进行逐个仲裁比较。仲裁获胜（被判定为优先级最高）的单元可继续发送消息，仲裁失利的单元则立刻停止发送而进行接收工作。<br>(3) 系统的柔软性<br>与总线相连的单元没有类似于“地址”的信息。因此在总线上增加单元时，连接在总线上的其它单元的软硬件及应用层都不需要改变。<br>(4) 通信速度<br>根据整个网络的规模，可设定适合的通信速度。<br>在同一网络中，所有单元必须设定成统一的通信速度。即使有一个单元的通信速度与其它的不一样，此单元也会输出错误信号，妨碍整个网络的通信。不同网络间则可以有不同的通信速度。<br>(5) 远程数据请求<br>可通过发送“遥控帧” 请求其他单元发送数据。<br>(6) 错误检测功能·错误通知功能·错误恢复功能<br>所有的单元都可以检测错误（错误检测功能）。<br>检测出错误的单元会立即同时通知其他所有单元（错误通知功能）。<br>正在发送消息的单元一旦检测出错误，会强制结束当前的发送。强制结束发送的单元会不断反复地重新发送此消息直到成功发送为止（错误恢复功能）。<br>(7) 故障封闭<br>CAN 可以判断出错误的类型是总线上暂时的数据错误（如外部噪声等）还是持续的数据错误（如单元内部故障、驱动器故障、断线等）。由此功能，当总线上发生持续数据错误时，可将引起此故障的单元从总线上隔离出去。<br>(8) 连接<br>CAN 总线是可同时连接多个单元的总线。可连接的单元总数理论上是没有限制的。但实际上可连接的单元数受总线上的时间延迟及电气负载的限制。降低通信速度，可连接的单元数增加；提高通信速度，则可连接<br>的单元数减少。</p><h3 id="CAN帧"><a href="#CAN帧" class="headerlink" title="CAN帧"></a>CAN帧</h3><ul><li>数据帧：用于发送单元向接收单元传送数据的帧；</li><li>远程帧：用于接收单元向具有相同标识符的发送单元请求数据的帧；</li><li>错误帧：用于当检测出错误时向其它单元通知错误的帧；</li><li>过载帧：用于接收单元通知其尚未做好接收准备的帧</li></ul><p>数据帧</p><p><img src="/2021/06/24/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%B8%A7.jpg" alt="数据帧"></p><p>图中示例标准数据帧（Standard）和扩展数据帧（Extended）两种格式。各字段定义及长度分别为：<br>SOF：表示数据帧开始；（1 bit）<br>Identifier：标准格式11 bit，扩展格式29 bit包括Base Identifier（11 bit）和Extended Identifier（18 bit），该区段标识数据帧的优先级，数值越小，优先级越高；<br>RTR：远程传输请求位，0时表示为数据帧，1表示为远程帧，也就是说RTR=1时，消息帧的Data Field为空；（1 bit）<br>IDE： 标识符扩展位，0时表示为标准格式，1表示为扩展格式；（1 bit）<br>DLC：数据长度代码，0<del>8表示数据长度为0</del>8 Byte；（4 bit）<br>Data Field：数据域；（0~8 Byte）<br>CRC Sequence：校验域，校验算法G(x) = x15 + x14 + x10 + x8 + x7 + x4 + x3 + 1；（15 bit）<br>DEL：校验域和应答域的隐性界定符；（1 bit）<br>ACK：应答，确认数据是否正常接收，所谓正常接收是指不含填充错误、格式错误、 CRC 错误。发送节点将此位为1，接收节点正常接收数据后将此位置为0；（1 bit）<br>SRR：替代远程请求位，在扩展格式中占位用，必须为1；（1 bit）<br>EOF：连续7个隐性位（1）表示帧结束；（7 bit）<br>ITM：帧间空间，Intermission (ITM)，又称Interframe Space (IFS)，连续3个隐性位，但它不属于数据帧。帧间空间是用于将数据帧和远程帧与前面的帧分离开来的帧。数据帧和远程帧可通过插入帧间空间将本帧与前面的任何帧（数据帧、遥控帧、错误帧、过载帧）分开。过载帧和错误帧前不能插入帧间空间。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>根据以上信息得到以下结论：</p><ol><li>CAN总线传输的数据是未加密的数据</li><li>基于CAN总线的数据传输是无认证的</li><li>可以对基于CAN总线的传输进行模糊测试和数据重放攻击</li><li>基于CAN线的数据传输无安全机制</li></ol><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>CAN总线无安全保护措施，很容易受到攻击，因此未来的车辆网推出了SECoc等安全机制</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;控制器局域网 (Controller Area Network，简称 CAN或者 CAN bus) 是一种功能丰富的车用总线标准。被设计用于在不需要主机（Host）的情况下，允许网络上的单片机和仪器相互通信。 它基于信息传递协议，设计之初在车辆上采用复用通讯线缆，以降低铜线使用量，后来也被其他行业所使用。它是由研发和生产汽车电子产品著称的德国 BOSCH公司开发的，是国际上应用最广泛的现场总线之一。 &lt;/p&gt;</summary>
    
    
    
    <category term="车载网络" scheme="http://enjoyvie.github.io.com/categories/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="总线安全" scheme="http://enjoyvie.github.io.com/tags/%E6%80%BB%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
