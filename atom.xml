<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Internet of Vehicles</title>
  
  
  <link href="http://enjoyvie.github.io.com/atom.xml" rel="self"/>
  
  <link href="http://enjoyvie.github.io.com/"/>
  <updated>2021-06-29T11:38:44.669Z</updated>
  <id>http://enjoyvie.github.io.com/</id>
  
  <author>
    <name>IOV_a</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CAN总线分析</title>
    <link href="http://enjoyvie.github.io.com/2021/06/24/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/"/>
    <id>http://enjoyvie.github.io.com/2021/06/24/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/</id>
    <published>2021-06-24T09:26:05.132Z</published>
    <updated>2021-06-29T11:38:44.669Z</updated>
    
    <content type="html"><![CDATA[<p>控制器局域网 (Controller Area Network，简称 CAN或者 CAN bus) 是一种功能丰富的车用总线标准。被设计用于在不需要主机（Host）的情况下，允许网络上的单片机和仪器相互通信。 它基于信息传递协议，设计之初在车辆上采用复用通讯线缆，以降低铜线使用量，后来也被其他行业所使用。它是由研发和生产汽车电子产品著称的德国 BOSCH公司开发的，是国际上应用最广泛的现场总线之一。 </p><span id="more"></span><h3 id="CAN的国际标准化"><a href="#CAN的国际标准化" class="headerlink" title="CAN的国际标准化"></a>CAN的国际标准化</h3><ul><li>ISO11898 定义为 高速 CAN 通信标准，通讯速度达 125Kbps ~ 1Mbps，总线最大长度 40m/1Mbps，连接单元数最大 30，属于闭环总线，终端电阻：120Ω。</li><li>ISO11519 - 2 定义为 低速 CAN 通信标准，通讯速度在 125Kbps以下，总线最大长度 1km/40Kbps，连接单元数最大 20，属于开环总线，终端电阻：2.2KΩ。</li></ul><h3 id="CAN总线拓扑图及架构"><a href="#CAN总线拓扑图及架构" class="headerlink" title="CAN总线拓扑图及架构"></a>CAN总线拓扑图及架构</h3><p>多个电子控制单元（ECU）和HOST分别连接到总线上。电子控制单元和HOST被称作节点（can node）。节点的复杂程度可以只是简单的输入输出设备，也可以是包含有 CAN交互器并搭载了软件的嵌入式组件。节点还可能是一个网关，允许普通计算机通过 USB或以太网端口与 CAN网络上的设备通信。</p><p><img src="/2021/06/24/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/CAN%E6%8B%93%E6%89%91.jpg" alt="CAN总线拓扑图及架构"></p><p>每个节点的组成包括：</p><ul><li>中央处理器、微处理器或主处理器：处理主机决定收到的信息的意思以及想要传输的信息。传感器、驱动器和控制设备可以与主处理器连接。</li><li>CAN控制器；通常是集成单片机的一部分，接收：CAN控制器将从总线上接收的串位字节存储直到整个消息可用，之后主处理器可以获取这个消息（通常由于 CAN控制器触发一个中断）。发送：主处理器发送传递信息到 CAN控制器，之后当总线空闲时将串位信息传递至总线。</li><li>CAN收发器；由 ISO11898-2/3介质访问单元（MAU）标准定义，接收：把数据流从CAN总线层转换成 CAN控制器可以使用的标准。 CAN控制器通常配有保护电路。传输：把来自 CAN控制器的数据流转换至 CAN总线层。</li></ul><h3 id="CAN信号"><a href="#CAN信号" class="headerlink" title="CAN信号"></a>CAN信号</h3><p>CAN总线电平分为显性电平和隐性电平两种。总线上执行逻辑上的线 “与” 时，显性电平的逻辑值为 “0”，隐性电平为 “1”。<br> “显性” 具有 “优先” 的意味，只要有一个单元输出显性电平，总线上即为显性电平。并且，“隐性” 具有 “包容” 的意味，只有所有的单元都输出隐性电平，总线上才为隐性电平。（显性电平比隐性电平更强。）总线必须处于两种电平之一。<br>ISO11898标准（125kbps ~ 1Mbps）和 ISO11519 - 2标准（10kbps ~ 125kbps）</p><p><img src="/2021/06/24/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/can%E4%BF%A1%E5%8F%B7.png" alt="CAN信号"></p><h3 id="CAN的特点"><a href="#CAN的特点" class="headerlink" title="CAN的特点"></a>CAN的特点</h3><p>(1)多主控制<br>在总线空闲时，所有的单元都可开始发送消息（多主控制）。<br>最先访问总线的单元可获得发送权（CSMA/CA 方式 *1）。<br>多个单元同时开始发送时，发送高优先级 ID 消息的单元可获得发送权。<br>(2) 消息的发送<br>在 CAN 协议中，所有的消息都以固定的格式发送。总线空闲时，所有与总线相连的单元都可以开始发送新消息。两个以上的单元同时开始发送消息时，根据标识符（Identifier 以下称为 ID）决定优先级。ID 并不是表示发送的目的地址，而是表示访问总线的消息的优先级。两个以上的单元同时开始发送消息时，对各消息ID 的每个位进行逐个仲裁比较。仲裁获胜（被判定为优先级最高）的单元可继续发送消息，仲裁失利的单元则立刻停止发送而进行接收工作。<br>(3) 系统的柔软性<br>与总线相连的单元没有类似于“地址”的信息。因此在总线上增加单元时，连接在总线上的其它单元的软硬件及应用层都不需要改变。<br>(4) 通信速度<br>根据整个网络的规模，可设定适合的通信速度。<br>在同一网络中，所有单元必须设定成统一的通信速度。即使有一个单元的通信速度与其它的不一样，此单元也会输出错误信号，妨碍整个网络的通信。不同网络间则可以有不同的通信速度。<br>(5) 远程数据请求<br>可通过发送“遥控帧” 请求其他单元发送数据。<br>(6) 错误检测功能·错误通知功能·错误恢复功能<br>所有的单元都可以检测错误（错误检测功能）。<br>检测出错误的单元会立即同时通知其他所有单元（错误通知功能）。<br>正在发送消息的单元一旦检测出错误，会强制结束当前的发送。强制结束发送的单元会不断反复地重新发送此消息直到成功发送为止（错误恢复功能）。<br>(7) 故障封闭<br>CAN 可以判断出错误的类型是总线上暂时的数据错误（如外部噪声等）还是持续的数据错误（如单元内部故障、驱动器故障、断线等）。由此功能，当总线上发生持续数据错误时，可将引起此故障的单元从总线上隔离出去。<br>(8) 连接<br>CAN 总线是可同时连接多个单元的总线。可连接的单元总数理论上是没有限制的。但实际上可连接的单元数受总线上的时间延迟及电气负载的限制。降低通信速度，可连接的单元数增加；提高通信速度，则可连接<br>的单元数减少。</p><h3 id="CAN帧"><a href="#CAN帧" class="headerlink" title="CAN帧"></a>CAN帧</h3><ul><li>数据帧：用于发送单元向接收单元传送数据的帧；</li><li>远程帧：用于接收单元向具有相同标识符的发送单元请求数据的帧；</li><li>错误帧：用于当检测出错误时向其它单元通知错误的帧；</li><li>过载帧：用于接收单元通知其尚未做好接收准备的帧</li></ul><p>数据帧</p><p><img src="/2021/06/24/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%B8%A7.jpg" alt="数据帧"></p><p>图中示例标准数据帧（Standard）和扩展数据帧（Extended）两种格式。各字段定义及长度分别为：<br>SOF：表示数据帧开始；（1 bit）<br>Identifier：标准格式11 bit，扩展格式29 bit包括Base Identifier（11 bit）和Extended Identifier（18 bit），该区段标识数据帧的优先级，数值越小，优先级越高；<br>RTR：远程传输请求位，0时表示为数据帧，1表示为远程帧，也就是说RTR=1时，消息帧的Data Field为空；（1 bit）<br>IDE： 标识符扩展位，0时表示为标准格式，1表示为扩展格式；（1 bit）<br>DLC：数据长度代码，0<del>8表示数据长度为0</del>8 Byte；（4 bit）<br>Data Field：数据域；（0~8 Byte）<br>CRC Sequence：校验域，校验算法G(x) = x15 + x14 + x10 + x8 + x7 + x4 + x3 + 1；（15 bit）<br>DEL：校验域和应答域的隐性界定符；（1 bit）<br>ACK：应答，确认数据是否正常接收，所谓正常接收是指不含填充错误、格式错误、 CRC 错误。发送节点将此位为1，接收节点正常接收数据后将此位置为0；（1 bit）<br>SRR：替代远程请求位，在扩展格式中占位用，必须为1；（1 bit）<br>EOF：连续7个隐性位（1）表示帧结束；（7 bit）<br>ITM：帧间空间，Intermission (ITM)，又称Interframe Space (IFS)，连续3个隐性位，但它不属于数据帧。帧间空间是用于将数据帧和远程帧与前面的帧分离开来的帧。数据帧和远程帧可通过插入帧间空间将本帧与前面的任何帧（数据帧、遥控帧、错误帧、过载帧）分开。过载帧和错误帧前不能插入帧间空间。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>根据以上信息得到以下结论：</p><ol><li>CAN总线传输的数据是未加密的数据</li><li>基于CAN总线的数据传输是无认证的</li><li>可以对基于CAN总线的传输进行模糊测试和数据重放攻击</li><li>基于CAN线的数据传输无安全机制</li></ol><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>CAN总线无安全保护措施，很容易受到攻击，因此未来的车辆网推出了SECoc等安全机制</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;控制器局域网 (Controller Area Network，简称 CAN或者 CAN bus) 是一种功能丰富的车用总线标准。被设计用于在不需要主机（Host）的情况下，允许网络上的单片机和仪器相互通信。 它基于信息传递协议，设计之初在车辆上采用复用通讯线缆，以降低铜线使用量，后来也被其他行业所使用。它是由研发和生产汽车电子产品著称的德国 BOSCH公司开发的，是国际上应用最广泛的现场总线之一。 &lt;/p&gt;</summary>
    
    
    
    <category term="车载网络" scheme="http://enjoyvie.github.io.com/categories/%E8%BD%A6%E8%BD%BD%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="总线安全" scheme="http://enjoyvie.github.io.com/tags/%E6%80%BB%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
